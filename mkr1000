#include "thingProperties.h"
#include <DHT.h>
#include <hd44780.h>
#include <hd44780ioClass/hd44780_I2Cexp.h>
#include <WiFi101.h>
#include <WiFiSSLClient.h>

// Define Sensor Pins
#define DHTPIN 4
#define DHTTYPE DHT11
#define CO2_PIN A0
#define MQ135_PIN A4
#define MQ2_PIN A6
#define MQ7_PIN A1
#define MQ8_PIN A2
#define MQ6_PIN A3
#define MQ9_PIN A5
#define FLAME_SENSOR_PIN 6

// RGB LED Pins
#define LED_RED 2
#define LED_GREEN 3
#define LED_BLUE 1

// Buzzer Pin
#define BUZZER_PIN 5

// LCD
hd44780_I2Cexp lcd;

// DHT Sensor
DHT dht(DHTPIN, DHTTYPE);

// Telegram Bot Credentials
const char* botToken = "8140614066:AAF5ed5IzM7Nih7Ad_Xq2oBnuUR2e2rpgsE";
const char* chatID = "1337613901";

// Page cycling variables
int lcdPage = 0;
unsigned long lastLcdUpdate = 0;
const unsigned long lcdUpdateInterval = 2000; // 2 seconds per page

// Variables to track notifications
bool flameNotified = false;
bool co2Notified = false;
bool mq135Notified = false;
bool mq2Notified = false;
bool mq7Notified = false;
bool mq8Notified = false;
bool mq6Notified = false;
bool mq9Notified = false;

void setup() {
    // Initialize Serial Monitor
    Serial.begin(9600);

    // Initialize IoT Cloud
    setDebugMessageLevel(2);
    initProperties();
    ArduinoCloud.begin(ArduinoIoTPreferredConnection);

    // Initialize DHT Sensor
    dht.begin();

    // Initialize LCD
    lcd.begin(20, 4);
    lcd.backlight();

    // Initialize RGB LED, Buzzer, and Flame Sensor Pins
    pinMode(LED_RED, OUTPUT);
    pinMode(LED_GREEN, OUTPUT);
    pinMode(LED_BLUE, OUTPUT);
    pinMode(BUZZER_PIN, OUTPUT);
    pinMode(FLAME_SENSOR_PIN, INPUT);

    // Display Welcome Message
    lcd.clear();
    lcd.setCursor(4, 0);
    lcd.print("WELCOME");
    lcd.setCursor(1, 1);
    lcd.print("AirGuard System");
    lcd.setCursor(2, 2);
    lcd.print("Initializing...");
    delay(3000);
    lcd.clear();

    Serial.println("System Online: AirGuard is now ACTIVE.");
    sendTelegramMessage("AirGuard System is now ACTIVE.");
}

void loop() {
    // Update IoT Cloud
    ArduinoCloud.update();

    // Read Sensors
    float temperature = dht.readTemperature();
    float humidity = dht.readHumidity();
    int co2_value = analogRead(CO2_PIN);
    int mq135_value = analogRead(MQ135_PIN) / 2;
    int mq2_value = analogRead(MQ2_PIN);
    int mq7_value = analogRead(MQ7_PIN);
    int mq8_value = analogRead(MQ8_PIN);
    int mq6_value = analogRead(MQ6_PIN);
    int mq9_value = analogRead(MQ9_PIN);
    bool flame_detected = digitalRead(FLAME_SENSOR_PIN) == 0;

    // Update IoT Cloud variables
// Update IoT Cloud variables with sensor data
::temperature = temperature;  // Update IoT Cloud variable with sensor data
::humidity = humidity;
::co2_value = co2_value;
::mq135_value = mq135_value;
::mq2_value = mq2_value;
::mq7_value = mq7_value;
::mq8_value = mq8_value;
::mq6_value = mq6_value;
::mq9_value = mq9_value;
::flame_detected = flame_detected;

    // Display Sensor Values on LCD
    unsigned long currentMillis = millis();
    if (currentMillis - lastLcdUpdate >= lcdUpdateInterval) {
        lastLcdUpdate = currentMillis;
        lcd.clear();

        switch (lcdPage) {
            case 0: // Page 1
                lcd.setCursor(0, 0);
                lcd.print("Temp:");
                lcd.print(temperature, 1);
                lcd.print("C Hum:");
                lcd.print(humidity, 1);
                lcd.setCursor(0, 1);
                lcd.print("CO2:");
                lcd.print(co2_value);
                lcd.print(" MQ135:");
                lcd.print(mq135_value);
                break;

            case 1: // Page 2
                lcd.setCursor(0, 0);
                lcd.print("MQ2:");
                lcd.print(mq2_value);
                lcd.print(" MQ7:");
                lcd.print(mq7_value);
                lcd.setCursor(0, 1);
                lcd.print("MQ8:");
                lcd.print(mq8_value);
                lcd.print(" MQ6:");
                lcd.print(mq6_value);
                lcd.setCursor(0, 2);
                lcd.print("MQ9:");
                lcd.print(mq9_value);
                lcd.print(" Flame:");
                lcd.print(flame_detected ? "Yes" : "No");
                break;

            default:
                lcdPage = -1; // Reset the cycle
        }
        lcdPage++;
    }

    // Handle Abnormal Sensor Values and Alerts
    bool sensor_alert = false;

    if (flame_detected && !flameNotified) {
        flameNotified = true;
        sendTelegramMessage("Flame Detected! Leave the room immediately!");
        triggerAlert("Flame Detected!");
    } else if (!flame_detected) {
        flameNotified = false;
    }

    if (co2_value > 800 && !co2Notified) {
        co2Notified = true;
        sendTelegramMessage("High CO2 Levels Detected!");
        triggerAlert("High CO2 Levels!");
    } else if (co2_value <= 800) {
        co2Notified = false;
    }

    if (mq135_value > 200 && !mq135Notified) {
        mq135Notified = true;
        sendTelegramMessage("High MQ135 Levels Detected!");
        triggerAlert("High MQ135 Levels!");
    } else if (mq135_value <= 200) {
        mq135Notified = false;
    }

    if (mq2_value > 500 && !mq2Notified) {
        mq2Notified = true;
        sendTelegramMessage("High MQ2 Levels Detected!");
        triggerAlert("High MQ2 Levels!");
    } else if (mq2_value <= 500) {
        mq2Notified = false;
    }

    if (mq7_value > 500 && !mq7Notified) {
        mq7Notified = true;
        sendTelegramMessage("High MQ7 Levels Detected!");
        triggerAlert("High MQ7 Levels!");
    } else if (mq7_value <= 500) {
        mq7Notified = false;
    }

    if (mq8_value > 500 && !mq8Notified) {
        mq8Notified = true;
        sendTelegramMessage("High MQ8 Levels Detected!");
        triggerAlert("High MQ8 Levels!");
    } else if (mq8_value <= 500) {
        mq8Notified = false;
    }

    if (mq6_value > 500 && !mq6Notified) {
        mq6Notified = true;
        sendTelegramMessage("High MQ6 Levels Detected!");
        triggerAlert("High MQ6 Levels!");
    } else if (mq6_value <= 500) {
        mq6Notified = false;
    }

    if (mq9_value > 500 && !mq9Notified) {
        mq9Notified = true;
        sendTelegramMessage("High MQ9 Levels Detected!");
        triggerAlert("High MQ9 Levels!");
    } else if (mq9_value <= 500) {
        mq9Notified = false;
    }

    // Update LED Status
    if (sensor_alert) {
        digitalWrite(LED_RED, HIGH);
        digitalWrite(LED_GREEN, LOW);
    } else {
        digitalWrite(LED_GREEN, HIGH);
        digitalWrite(LED_RED, LOW);
    }

    delay(2000); // Delay for stability
}

void triggerAlert(String message) {
    // Display Warning on LCD
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("WARNING!");
    lcd.setCursor(0, 1);
    lcd.print(message);
    lcd.setCursor(0, 2);
    lcd.print("Leave the room!");
    tone(BUZZER_PIN, 1000, 3000);
}

void sendTelegramMessage(String message) {
    WiFiSSLClient client;
    String url = String("https://api.telegram.org/bot") + botToken + "/sendMessage?chat_id=" + chatID + "&text=" + message;

    if (client.connect("api.telegram.org", 443)) {
        client.println("GET " + url + " HTTP/1.1");
        client.println("Host: api.telegram.org");
        client.println("Connection: close");
        client.println();
        Serial.println("Telegram message sent: " + message);    
    } else {
        Serial.println("Failed to connect to Telegram server.");
    }
}
