import serial
from datetime import datetime
import pygame
import RPi.GPIO as GPIO
import time

# Set up the serial connection
serial_port = '/dev/ttyACM0'
baud_rate = 9600

try:
    ser = serial.Serial(serial_port, baud_rate, timeout=1)
    print(f"Connected to {serial_port} at {baud_rate} baud.")
except serial.SerialException as e:
    print(f"Error: {e}")
    exit(1)

# Initialize pygame mixer for playing sound
pygame.mixer.init()

# Load the warning sound file
warning_sound_path = "/home/pi/airguard/warning.mp3"
pygame.mixer.music.load(warning_sound_path)

# GPIO setup for fan and traffic light module
FAN_PIN = 16
RED_LED = 25
YELLOW_LED = 23
GREEN_LED = 24

GPIO.setmode(GPIO.BCM)
GPIO.setup(FAN_PIN, GPIO.OUT)
GPIO.setup(RED_LED, GPIO.OUT)
GPIO.setup(YELLOW_LED, GPIO.OUT)
GPIO.setup(GREEN_LED, GPIO.OUT)

# Functions to control the fan
def set_fan_state(state):
    if state == "ON":
        GPIO.output(FAN_PIN, GPIO.HIGH)
        print("Fan is ON")
    elif state == "OFF":
        GPIO.output(FAN_PIN, GPIO.LOW)
        print("Fan is OFF")

# Functions to control the traffic light LEDs
def set_traffic_light(state, duration=0):
    if state == "GREEN":
        GPIO.output(GREEN_LED, GPIO.HIGH)
        GPIO.output(YELLOW_LED, GPIO.LOW)
        GPIO.output(RED_LED, GPIO.LOW)
        print("Traffic Light: GREEN")
    elif state == "YELLOW":
        GPIO.output(GREEN_LED, GPIO.LOW)
        GPIO.output(YELLOW_LED, GPIO.HIGH)
        GPIO.output(RED_LED, GPIO.LOW)
        print("Traffic Light: YELLOW")
        time.sleep(duration)
    elif state == "RED":
        GPIO.output(GREEN_LED, GPIO.LOW)
        GPIO.output(YELLOW_LED, GPIO.LOW)
        GPIO.output(RED_LED, GPIO.HIGH)
        print("Traffic Light: RED")
        time.sleep(duration)

# Function to play the warning sound
def play_warning_sound():
    if not pygame.mixer.music.get_busy():  # Play only if not already playing
        pygame.mixer.music.play()

# Function to stop the warning sound
def stop_warning_sound():
    if pygame.mixer.music.get_busy():  # Stop only if playing
        pygame.mixer.music.stop()

# Ensure fan is ON and traffic light is GREEN at the start
set_fan_state("ON")
set_traffic_light("GREEN")

# Flags to track abnormal conditions
flame_detected = False
abnormal_condition = False

while True:
    try:
        if ser.in_waiting > 0:
            # Read the incoming data
            line = ser.readline().decode('utf-8').strip()
            print(f"Received: {line}")

            # Log the data with a timestamp
            with open("sensor_data.log", "a") as log_file:
                log_file.write(f"{datetime.now()}, {line}\n")

            # Check for flame sensor status
            if "Flame Detected: Yes" in line:
                if not flame_detected:
                    print("Flame detected! Playing warning sound...")
                    play_warning_sound()
                    flame_detected = True

            elif "Flame Detected: No" in line:
                if flame_detected:
                    print("Flame cleared! Stopping warning sound...")
                    stop_warning_sound()
                    flame_detected = False

            # Check for other abnormal conditions (e.g., high CO2 or gas levels)
            if "High" in line:
                if not abnormal_condition:
                    print("Abnormal condition detected!")
                    abnormal_condition = True
            else:
                abnormal_condition = False

            # Control the fan and traffic light based on conditions
            if flame_detected or abnormal_condition:
                # Turn off the fan for 5 seconds
                set_fan_state("OFF")
                print("Fan will remain OFF for 5 seconds...")
                set_traffic_light("YELLOW", duration=2)  # Yellow for 2 seconds
                set_traffic_light("RED", duration=5)     # Red for 5 seconds
                time.sleep(5)  # Fan remains off for 5 seconds

            else:
                # Normal conditions: Fan ON, Green light ON
                set_fan_state("ON")
                set_traffic_light("GREEN")

    except KeyboardInterrupt:
        print("Exiting program.")
        GPIO.cleanup()  # Clean up GPIO
        ser.close()
        break
    except Exception as e:
        print(f"Error: {e}")
        GPIO.cleanup()  # Clean up GPIO on error
        ser.close()
        break
